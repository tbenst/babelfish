#!/usr/bin/env nix-shell
#! nix-shell -I nixpkgs=https://github.com/tbenst/nixpkgs/archive/a6d77b1403caaf46f19223eab8638f55927f56e2.tar.gz
#! nix-shell ../../default.nix -i python

# TODO add support for NVENC https://github.com/Zulko/moviepy/issues/1014
#%%
import click
import numpy as np
import babelfish as bf
import h5py
from tqdm import tqdm


@click.command()
@click.argument("h5_path", type=click.Path(exists=True))
@click.argument("dataset", type=str, required=False,
    default="/imaging/motion_corrected")
@click.argument("out_dataset", type=str, required=False,
    default="/imaging/motion_corrected_small")
def main(h5_path, dataset, out_dataset):
    # TODO need to rewrite to be streaming (too much memory usage)
    print("resizing")
    with h5py.File(h5_path, 'a') as tyh5:
        imaging = tyh5[dataset]
        image = tyh5[dataset][0]
        shape = imaging.shape
        dtype = image.dtype
        nFrames = shape[0]
        assert dtype in [np.float32, np.float64]
        assert len(shape)==3 #or len(shape)==4
        chunk_size = bf.helpers.chunk_size_for_memory_quota(imaging)
        if len(shape)==3:
            nframes, H, W = imaging.shape
            new_image = bf.helpers.resize_3d(imaging[[0]],0.5,0.5)
            newH, newW = new_image.shape[-2:]
            if out_dataset in tyh5:
                click.confirm(f'Do you want to overwrite {out_dataset}?',
                    abort=True)
            del tyh5[out_dataset]
            dset = tyh5.create_dataset(out_dataset,(nFrames, newH, newW),
                dtype=dtype)
            for s in tqdm(range(0,nFrames,chunk_size)):
                new_stack = bf.helpers.resize_3d(imaging[s:s+chunk_size], 0.5, 0.5)
                dset[s:s+chunk_size] = new_stack
        elif len(shape)==4:
            raise(NotImplemented())
            Z, nframes, H, W = imaging.shape
            newStack = resize_4d(imaging, 0.5, 0.5)
            # newStack = newStack.swapaxes(0,1)
            dims = 4
        else:
            raise(NotImplemented("wrong dimensions", tiff.shape))
        
        for name, value in imaging.attrs.items():
            dset.attrs[name] = value


if __name__ == '__main__':
    main()