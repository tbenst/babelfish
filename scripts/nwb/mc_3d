#!/usr/bin/env python

"""
This script follows closely the demo_pipeline_nwb.py script but for a 3d 
dataset and only through the motion correction process.
"""

import cv2
import glob
import logging
import matplotlib.pyplot as plt
import numpy as np
import os
import pynwb
from pynwb import NWBHDF5IO


try:
    cv2.setNumThreads(0)
except:
    pass

try:
    if __IPYTHON__:
        # this is used for debugging purposes only. allows to reload classes
        # when changed
        get_ipython().magic('load_ext autoreload')
        get_ipython().magic('autoreload 2')
except NameError:
    pass


import caiman as cm
from caiman.motion_correction import MotionCorrect
from caiman.source_extraction.cnmf import cnmf as cnmf
from caiman.source_extraction.cnmf import params as params
from caiman.utils.utils import download_demo
from caiman.paths import caiman_datadir
import hdf5plugin

# %%
# Set up the logger (optional); change this if you like.
# You can log to a file using the filename parameter, or make the output more
# or less verbose by setting level to logging.DEBUG, logging.INFO,
# logging.WARNING, or logging.ERROR

logging.basicConfig(format=
                    "%(relativeCreated)12d [%(filename)s:%(funcName)20s():%(lineno)s]"\
                    "[%(process)d] %(message)s",
                    level=logging.WARNING)

#%% Select file(s) to be processed (download if not present)
#    fnames = [os.path.join(caiman_datadir(), 'example_movies/sampled3dMovieRigid.nwb')]  
fnames = ["/data/noah_xlfm/2020-02-26/2020-02-26_xlfm.nwb"]
    # filename to be created or processed
# dataset dependent parameters

with NWBHDF5IO(fnames[0], 'r') as io:
    nwbfile = io.read()
    fr = nwbfile.acquisition["imaging"].rate

dset_name = 'acquisition/imaging'

# TODO: read from nwb
fr = 2  # imaging rate in frames per second
decay_time = 2  # length of a typical transient in seconds

starting_time = 0.
#%% First setup some parameters for data and motion correction


# motion correction parameters
# TODO: read from nwb
dxy = (1.121, 1.121, 1.5)  # spatial resolution in x, y, and z in (um per pixel)
# note the lower than usual spatial resolution here
max_shift_um = (10., 10., 10.)  # maximum shift in um
patch_motion_um = (50., 50., 30.)  # patch size for non-rigid correction in um
#    pw_rigid = False       # flag to select rigid vs pw_rigid motion correction
niter_rig = 1
pw_rigid = True       # flag to select rigid vs pw_rigid motion correction
# maximum allowed rigid shift in pixels
max_shifts = [int(a/b) for a, b in zip(max_shift_um, dxy)]
# start a new patch for pw-rigid motion correction every x pixels
strides = tuple([int(a/b) for a, b in zip(patch_motion_um, dxy)])
# overlap between pathes (size of patch in pixels: strides+overlaps)
overlaps = (24, 24, 4)
# maximum deviation allowed for patch with respect to rigid shifts
max_deviation_rigid = 3
is3D = True

mc_dict = {
    'fnames': fnames,
    'fr': fr,
    'decay_time': decay_time,
    'dxy': dxy,
    'pw_rigid': pw_rigid,
    'niter_rig': niter_rig,
    'max_shifts': max_shifts,
    'strides': strides,
    'overlaps': overlaps,
    'max_deviation_rigid': max_deviation_rigid,
    'border_nan': 'copy',
    'var_name_hdf5': dset_name,
    'is3D': is3D,
    'splits_els': 12,
    'splits_rig': 12
}

opts = params.CNMFParams(params_dict=mc_dict) #NOTE: default adjustments of parameters are not set yet, manually setting them now

# %% play the movie (optional)
# playing the movie using opencv. It requires loading the movie in memory.
# To close the video press q
display_images = False
if display_images:
    m_orig = cm.load_movie_chain(fnames, var_name_hdf5=opts.data['var_name_hdf5'],is3D=True)
    T, h, w, z = m_orig.shape # Time, plane, height, weight
    m_orig = np.reshape(np.transpose(m_orig, (3,0,1,2)), (T*z, h, w))
    ds_ratio = 0.2
    moviehandle = m_orig.resize(1, 1, ds_ratio)
    moviehandle.play(q_max=99.5, fr=60, magnification=2)

# %% start a cluster for parallel processing
# NOTE: ignore dview right now for debugging purposes
#    c, dview, n_processes = cm.cluster.setup_cluster(
#        backend='local', n_processes=None, single_thread=False)

# %%% MOTION CORRECTION
# first we create a motion correction object with the specified parameters
mc = MotionCorrect(fnames, dview=None, var_name_hdf5=opts.data['var_name_hdf5'], **opts.get_group('motion'))
#    mc = MotionCorrect(fnames, dview=dview, var_name_hdf5=opts.data['var_name_hdf5'], **opts.get_group('motion'))
# note that the file is not loaded in memory

# %% Run (piecewise-rigid motion) correction using NoRMCorre
mc.motion_correct(save_movie=False)

# %% compare with original movie
if display_images:
    m_orig = cm.load_movie_chain(fnames, var_name_hdf5=opts.data['var_name_hdf5'],is3D=True)
    T, h, w, z = m_orig.shape # Time, plane, height, weight
    m_orig = np.reshape(np.transpose(m_orig, (3,0,1,2)), (T*z, h, w))

    m_els = cm.load(mc.mmap_file,is3D=True)
    m_els = np.reshape(np.transpose(m_els, (3,0,1,2)), (T*z, h, w))

    ds_ratio = 0.2
    moviehandle = cm.concatenate([m_orig.resize(1, 1, ds_ratio) - mc.min_mov*mc.nonneg_movie,
                                  m_els.resize(1, 1, ds_ratio)], axis=2)
    moviehandle.play(fr=60, q_max=99.5, magnification=2)  # press q to exit
