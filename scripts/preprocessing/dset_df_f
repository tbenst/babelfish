#!/usr/bin/env python

import os
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
import tables, click
from scipy import ndimage
from tqdm import tqdm
import matplotlib.pyplot as plt
import numpy as np


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument("tyh5_path", type=click.Path(exists=True), required=False)
@click.option('-g', '--gpu', default="1", help="GPU ID to use")
@click.option("-c", "--compression-level", default=3, help="compression for zstd")
@click.option('-d', '--dset', default="/imaging/small",
              help="which HDF5 dataset to use")
@click.option("-e", "--experiment-directory", type=click.Path(exists=True))
@click.option("-w", "--window-size", type=int, default=None)
def main(tyh5_path, experiment_directory, gpu, dset, compression_level,
         window_size):
    "Must specify TYH5_PATH or pass --experiment-directory"
    # must come before torch import
    os.environ["CUDA_VISIBLE_DEVICES"]=gpu
    from babelfish.helpers import tables_df_f
    import torch.nn.functional as F
    from babelfish.helpers import glob_one_file
    
    
    group, name = os.path.split(dset)
    
    if not tyh5_path:
        experiment_directory = experiment_directory + '/'
        tyh5_path = glob_one_file(experiment_directory+"*.ty.h5")
    with tables.open_file(tyh5_path, 'a', swmr=True) as h5:
        imaging = h5.root[dset]
        if not window_size and "frame_rate" in h5.root.imaging._v_attrs:
            frame_rate = h5.root.imaging._v_attrs["frame_rate"]
            window_size = int(frame_rate*60*5) # 5 minutes
        dset_filter = tables.filters.Filters(complevel=compression_level,
                                             complib='blosc:zstd')
        out_dset = dset+'_df_f'
        if out_dset in h5:
            click.confirm(f'Do you want to overwrite {out_dset}?',
                abort=True)
            h5.remove_node(out_dset)

        out = h5.create_carray(group, name+'_df_f',
            imaging.atom, shape=imaging.shape,
            filters=dset_filter)
        
        tables_df_f(imaging, out, window_size, 20)

        
    
if __name__ == "__main__":
    main()