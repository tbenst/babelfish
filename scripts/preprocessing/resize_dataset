#!/usr/bin/env python

# TODO change to assume dim 5 as now part of imaging spec
#%%
import click, os
import numpy as np
import babelfish as bf
from babelfish.helpers import glob_one_file, print_help
import tables
from tqdm import tqdm


@click.command()
@click.argument("h5_path", type=click.Path(exists=True), required=False)
@click.option("-e", "--experiment-directory", type=click.Path(exists=True))
@click.option("-d", "--dataset", type=str, required=False,
    default="/imaging/motion_corrected")
@click.option("-o", "--out-dataset", type=str, required=False,
    default="/imaging/motion_corrected_small")
@click.option("-c", "--compression-level", default=3, help="compression for zstd")
def main(h5_path, experiment_directory, dataset, out_dataset,
         compression_level: int):
    if not h5_path and experiment_directory:
        experiment_directory = experiment_directory + '/'
        h5_path = glob_one_file(experiment_directory+"*.ty.h5")
    elif h5_path:
        pass
    else:
        print_help()

    print("resizing")
    with tables.open_file(h5_path, 'a') as tyh5:
        imaging = tyh5.root[dataset]
        # image = tyh5.root[dataset][0]
        shape = imaging.shape
        dtype = imaging.dtype
        # dtype = image.dtype
        nFrames = shape[0]
        # assert dtype in [np.float32, np.float64]
        chunk_size = bf.helpers.chunk_size_for_memory_quota(imaging)
        dset_filter = tables.filters.Filters(complevel=compression_level, complib='blosc:zstd')

        if len(shape)==3:
            raise(NotImplementedError("need to update for tables"))
            click.confirm('Spec calls for 5d imaging, but this is 3d. Are you'
                'sure you want to proceed?',
                    abort=True)

            nframes, H, W = imaging.shape
            new_image = bf.helpers.resize_3d(imaging[[0]],0.5,0.5)
            newH, newW = new_image.shape[-2:]
            print(f"New size will be ({newH}, {newW})")
            if out_dataset in tyh5:
                click.confirm(f'Do you want to overwrite {out_dataset}?',
                    abort=True)
                del tyh5[out_dataset]
            dset = tyh5.create_dataset(out_dataset,(nFrames, newH, newW),
                dtype=dtype)
            for s in tqdm(range(0,nFrames,chunk_size)):
                new_stack = bf.helpers.resize_3d(imaging[s:s+chunk_size], 0.5, 0.5)
                dset[s:s+chunk_size] = new_stack
        elif len(shape)==4:
            raise(NotImplementedError("need to update for tables"))
            nframes, Z, H, W = imaging.shape
            new_image = bf.helpers.resize_4d(imaging[[0]], 0.5, 0.5)
            newH, newW = new_image.shape[-2:]
            print(f"New size will be ({newH}, {newW})")
            if out_dataset in tyh5:
                click.confirm(f'Do you want to overwrite {out_dataset}?',
                    abort=True)
                del tyh5[out_dataset]
            dset = tyh5.create_dataset(out_dataset,(nFrames, Z, newH, newW),
                dtype=dtype)
            for s in tqdm(range(0,nFrames,chunk_size)):
                new_stack = bf.helpers.resize_4d(imaging[s:s+chunk_size], 0.5, 0.5)
                dset[s:s+chunk_size] = new_stack
        elif len(shape)==5:
            nframes, C, Z, H, W = imaging.shape
            new_image = bf.helpers.resize_4d(imaging[0], 0.5, 0.5)
            newH, newW = new_image.shape[-2:]
            print(f"New size will be ({newH}, {newW})")
            if out_dataset in tyh5:
                click.confirm(f'Do you want to overwrite {out_dataset}?',
                    abort=True)
                tyh5.remove_node(out_dataset)
            group, dset_name = os.path.split(out_dataset)
            dset = tyh5.create_carray(group, dset_name,
                tables.Atom.from_dtype(dtype), shape=(nframes, C, Z, newH, newW),
                filters=dset_filter)

            for s in tqdm(range(0,nFrames)):
                new_stack = bf.helpers.resize_4d(imaging[s], 0.5, 0.5)
                dset[s] = new_stack

        else:
            raise(NotImplemented("wrong dimensions", shape))
        
        # TODO re-enable
        for name in imaging._v_attrs._v_attrnamesuser:
            dset._v_attrs[name] = imaging._v_attrs[name]


if __name__ == '__main__':
    main()